[{"authors":null,"categories":null,"content":"I am a Senior Data Scientist at Paramount Pictures. I am skilled in modern statistical models, machine learning technique, advanced spatial analysis, and data visualization. I am committed to diligent data interpretation, creative tool building, and developing data-driven solutions and strategies.\n  Download my resum√©.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/jane-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/jane-li/","section":"authors","summary":"I am a Senior Data Scientist at Paramount Pictures. I am skilled in modern statistical models, machine learning technique, advanced spatial analysis, and data visualization. I am committed to diligent data interpretation, creative tool building, and developing data-driven solutions and strategies.","tags":null,"title":"Jane Li","type":"authors"},{"authors":null,"categories":["Data Visualization","Spatial Analysis"],"content":"      In this post, I used Open data from Chicago Transit Authority (CTA) to segment routes based on ridership, and developed a visualization dashboard to identify stops with unbalanced boardings and alightings and stops with the most ridership. Get the raw data here.\nload package library(knitr) library(tidyverse) library(stringr) library(sf) library(kableExtra) library(RColorBrewer) library(viridis) library(leaflet) library(ggmap) library(widgetframe) raw_df\u0026lt;- read_csv(\u0026quot;CTA_-_Ridership_-_Avg._Weekday_Bus_Stop_Boardings_in_October_2012.csv\u0026quot;) #clean raw_df raw_df\u0026lt;- raw_df %\u0026gt;% mutate( location= str_replace_all(location, \u0026quot;[()]\u0026quot;, \u0026quot;\u0026quot;)) %\u0026gt;% separate(location, c(\u0026quot;lat\u0026quot;, \u0026quot;lon\u0026quot;), sep = \u0026quot;,\u0026quot;) %\u0026gt;% mutate( lat =as.numeric(lat)) %\u0026gt;% mutate( lon= as.numeric(lon))  Table 1 Routes with most stops  #What is the route with the most stops? routes \u0026lt;- raw_df %\u0026gt;% separate_rows(routes) %\u0026gt;% group_by(routes) %\u0026gt;% summarise(Number_of_stops=n_distinct(stop_id)) %\u0026gt;% arrange(desc(Number_of_stops)) kable(routes[1:10, ], booktabs = T) %\u0026gt;% kable_styling(bootstrap_options = \u0026quot;striped\u0026quot;, full_width = F, position = \u0026quot;left\u0026quot;)   routes  Number_of_stops      9  273    49  242    151  221    8  220    3  213    82  209    62  206    79  206    N5  206    4  202      Table 2 Stops with the most routes  #What is the stop with the most routes? stops \u0026lt;- raw_df %\u0026gt;% mutate(number_of_routes = str_count(routes, \u0026quot;\\\\d+\u0026quot;)) %\u0026gt;% arrange(desc(number_of_routes)) %\u0026gt;% select(stop_id,on_street, cross_street, routes, number_of_routes) kable(stops[1:10, ], booktabs = T) %\u0026gt;% kable_styling(bootstrap_options = \u0026quot;striped\u0026quot;, full_width = F, position = \u0026quot;left\u0026quot;)   stop_id  on_street  cross_street  routes  number_of_routes      1106  MICHIGAN  WASHINGTON  3,4,19,20,26,60,N66,124,143,145,147,148,151,157  14    73  MICHIGAN  betw. VAN BUREN \u0026amp; CONGRES  1,3,4,7,J14,26,X28,126,129,132,143,147,148  13    1103  MICHIGAN  HUBBARD (WRIGLEY BLDG.)  2,3,10,26,N66,143,144,145,146,147,148,151,157  13    1120  MICHIGAN  SOUTH WATER  3,6,20,26,N66,143,144,145,146,147,148,151,157  13    1122  MICHIGAN  HUBBARD (TRIBUNE BLDG.)  2,3,10,26,N66,143,144,145,146,147,148,151,157  13    1100  MICHIGAN  ERIE  3,10,26,33,125,143,144,145,146,147,148,151  12    1101  MICHIGAN  OHIO  2,3,10,26,143,144,145,146,147,148,151,157  12    1102  MICHIGAN  ILLINOIS  2,3,10,26,143,144,145,146,147,148,151,157  12    1105  MICHIGAN  betw. LAKE \u0026amp; RANDOLPH  3,4,19,26,N66,124,143,145,147,148,151,157  12    1123  MICHIGAN  GRAND  2,3,10,26,143,144,145,146,147,148,151,157  12      Figure 1 Stop Density Map  #get chicago basemap chi_bb \u0026lt;- c(left = -87.88430, bottom = 41.64416, right = -87.52570, top = 42.06470) chicago_stamen \u0026lt;- get_stamenmap(bbox = chi_bb, zoom = 11, maptype = \u0026#39;toner-lite\u0026#39;) # calculate stop density df_sp \u0026lt;- st_as_sf(raw_df, coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;), crs = 4326) %\u0026gt;% select(-c(\u0026#39;month_beginning\u0026#39;,\u0026#39;daytype\u0026#39;)) #plot them together stops_density_map \u0026lt;- ggmap(chicago_stamen)+ stat_density_2d(data = raw_df, aes(x = lon, y = lat, fill = stat(level)), alpha = .4, bins = 5, geom = \u0026quot;polygon\u0026quot;) + scale_fill_gradientn(\u0026#39;number of stops\u0026#39;,colors = brewer.pal(5, \u0026quot;YlOrRd\u0026quot;)) + geom_sf(data = df_sp, inherit.aes = FALSE,color=\u0026#39;black\u0026#39;, size = 0.2, alpha=0.1,show.legend = \u0026#39;point\u0026#39;) stops_density_map  Figure 2 Map of stops with no ridership  #tranform to long dataframe stops_route \u0026lt;- raw_df %\u0026gt;% mutate(number_of_routes = str_count(routes, \u0026quot;\\\\d+\u0026quot;)) %\u0026gt;% separate_rows(routes) %\u0026gt;% mutate( boardings = boardings/number_of_routes) %\u0026gt;% mutate(alightings = alightings/ number_of_routes) %\u0026gt;% select( -c(number_of_routes,daytype,month_beginning)) %\u0026gt;% gather(\u0026quot;boardings\u0026quot;, \u0026quot;alightings\u0026quot;, key = type, value = ridership) #make it sf object stops_route_sp \u0026lt;- st_as_sf(stops_route, coords = c(\u0026quot;lon\u0026quot;, \u0026quot;lat\u0026quot;), crs = 4326) #stops with no boardings and alightings #transform stops_no_ridership to spatial dataframe stops_no_ridership_sp \u0026lt;- stops_route_sp %\u0026gt;% filter (ridership==0) %\u0026gt;% group_by(stop_id, routes) %\u0026gt;% filter(n()\u0026gt;1) #n_distinct(stops_no_ridership_sp$stop_id) #n_distinct(stops_no_ridership_sp$routes) #set color scheme pal \u0026lt;- colorFactor(palette = \u0026#39;Spectral\u0026#39;, domain =stops_no_ridership_sp$routes) #plot p1\u0026lt;-leaflet(stops_no_ridership_sp) %\u0026gt;% setView(lng=-87.705, lat=41.85443, zoom = 10) %\u0026gt;% addProviderTiles(providers$Stamen.Toner,group=\u0026quot;Stamen Toner\u0026quot;) %\u0026gt;% addCircleMarkers( color = ~pal(routes), radius = ~ ifelse(ridership \u0026lt;=100, 6, ifelse((ridership \u0026lt;=1000),10,15)), stroke = FALSE, fillOpacity = 0.8, popup = ~paste(\u0026quot;Stop_id:\u0026quot;, stop_id, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026quot;Route:\u0026quot;, routes, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026quot;Ridership:\u0026quot;, ridership)) %\u0026gt;% addLegend(\u0026quot;topright\u0026quot;, pal = pal, opacity = 1, values = ~routes, title = \u0026quot;Routes\u0026quot;) frameWidget(p1, width=\u0026#39;100%\u0026#39;)  {\"x\":{\"url\":\"/post/2019-11-23-r-rmarkdown_files/figure-html//widgets/widget_stop_route_long.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]}  Table 3 Top 10 most trafficked routes  #routes by boarding and alighting ridership ridership_by_routes\u0026lt;- stops_route %\u0026gt;% filter(!is.na(routes)) %\u0026gt;% group_by(routes, type) %\u0026gt;% summarise(n=sum(ridership)) %\u0026gt;% spread(type, n) %\u0026gt;% mutate(total =boardings+ alightings) %\u0026gt;% arrange(desc(total)) kable(ridership_by_routes[1:10, ], booktabs = T) %\u0026gt;% kable_styling(bootstrap_options = \u0026quot;striped\u0026quot;, full_width = F, position = \u0026quot;left\u0026quot;)   routes  alightings  boardings  total      9  33119.68  33704.75  66824.43    79  31520.93  31741.53  63262.47    49  29305.87  29500.68  58806.55    66  26494.62  26566.83  53061.45    77  24193.93  22996.52  47190.45    8  23579.65  23555.37  47135.02    53  23540.77  23586.90  47127.67    4  23855.90  22107.08  45962.98    82  22379.65  22005.20  44384.85    63  21785.53  21732.61  43518.14      Figure 3 Stops segmentation based on Ridership  #reshape df with only lat, lon, boardings, and alights columns #scale the dataset km_df_scale\u0026lt;- raw_df%\u0026gt;% select(stop_id,boardings,alightings) %\u0026gt;% column_to_rownames(var=\u0026quot;stop_id\u0026quot;) %\u0026gt;% scale() library(factoextra) set.seed(123) # function to compute total within-cluster sum of square wss \u0026lt;- function(k) { kmeans(km_df_scale, k,iter.max = 100, nstart = 25 )$tot.withinss } # Compute and plot wss for k = 1 to k = 15 k.values \u0026lt;- 1:15 # extract wss for 2-15 clusters wss_values \u0026lt;- map_dbl(k.values, wss) #plot optimal K plot(k.values, wss_values, type=\u0026quot;b\u0026quot;, pch = 19, frame = FALSE, xlab=\u0026quot;Number of clusters K\u0026quot;, ylab=\u0026quot;Total within-clusters sum of squares\u0026quot;) set.seed(123) #kmeans with 3 clusters km.res \u0026lt;- kmeans(km_df_scale, 3, iter.max = 100, nstart = 25) #join with raw df dd \u0026lt;- cbind(raw_df, cluster = km.res$cluster) #plot dd %\u0026gt;% ggplot(aes(x=boardings, y= alightings, color= factor(cluster))) + geom_point() + geom_abline(aes(intercept = 0 , slope= 1 ), linetype= \u0026quot;dashed\u0026quot;) + scale_x_continuous(trans = \u0026#39;log\u0026#39;) + scale_y_continuous(trans = \u0026#39;log\u0026#39;) + scale_size(range = c(0.5, 5)) + scale_color_brewer(\u0026quot;\u0026quot;, palette = \u0026quot;Set1\u0026quot;, labels = c(\u0026quot;Stops with little ridership\u0026quot;, \u0026quot;Stops with most ridership\u0026quot;, \u0026quot;Stops with medium ridership\u0026quot;)) + theme_bw() + xlab(\u0026quot;Boardings\u0026quot;) + ylab(\u0026quot;Alightings\u0026quot;)  #visualize on a map m = leaflet() %\u0026gt;% setView(lng=-87.705, lat=41.85443, zoom = 10) %\u0026gt;% addProviderTiles(providers$Stamen.Toner,group=\u0026quot;Stamen Toner\u0026quot;) # subset into clusters data_filterlist = list(cluster_1 = subset(dd, cluster == 1), cluster_2 = subset(dd, cluster == 2), cluster_3 = subset(dd, cluster == 3)) # Remember we also had these groups associated with each variable? Let\u0026#39;s put them in a list too: layerlist = c(\u0026quot;Stops with little ridership\u0026quot;, \u0026quot;Stops with most ridership\u0026quot;, \u0026quot;Stops with medium ridership\u0026quot;) # We can keep that same color variable: colorFactors = colorFactor(c(\u0026#39;red\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;seagreen\u0026#39;), domain=dd$cluster) # Now we have our loop - each time through the loop, it is adding our markers to the map object: for (i in 1:length(data_filterlist)){ m = addCircleMarkers(m, lng=data_filterlist[[i]]$lon, lat=data_filterlist[[i]]$lat, radius=1, popup= paste( \u0026quot;Stop_id:\u0026quot;,data_filterlist[[i]]$stop_id, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026quot;Routes:\u0026quot;, data_filterlist[[i]]$routes, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026quot;Boardings:\u0026quot;,data_filterlist[[i]]$boardings, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026quot;Alightings:\u0026quot;,data_filterlist[[i]]$alightings), stroke = FALSE, fillOpacity = 0.75, color = colorFactors(data_filterlist[[i]]$cluster), group = layerlist[i] ) } p2\u0026lt;- addLayersControl(m, overlayGroups = layerlist, options = layersControlOptions(collapsed = FALSE)) frameWidget(p2, width=\u0026#39;100%\u0026#39;)  {\"x\":{\"url\":\"/post/2019-11-23-r-rmarkdown_files/figure-html//widgets/widget_unnamed-chunk-6.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]}   ","date":1574467200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574467200,"objectID":"0eddc3718c711d588ede8c8f49baed29","permalink":"/post/2019-11-23-r-rmarkdown/","publishdate":"2019-11-23T00:00:00Z","relpermalink":"/post/2019-11-23-r-rmarkdown/","section":"post","summary":"In this post, I used Open data from Chicago Transit Authority (CTA) to segment routes based on ridership, and developed a visualization dashboard to identify stops with unbalanced boardings and alightings and stops with the most ridership.","tags":["R Markdown","spatial maps","segmentation"],"title":"Visualizing Chicago Public Transit Ridership","type":"post"},{"authors":null,"categories":null,"content":"","date":1571529600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571529600,"objectID":"c54ce356ea551d28309ddfc1e9a8fc47","permalink":"/project/chicago_transit/","publishdate":"2019-10-20T00:00:00Z","relpermalink":"/project/chicago_transit/","section":"project","summary":"Visualizing Chicago public transit ridership.","tags":["Clustering","Data Visualization","Shiny R"],"title":"How Busy Are Your Bus Routes?","type":"project"},{"authors":null,"categories":["Computer Vision","Object Detection"],"content":"I am a fashion lover and environmentalist at heart. Buying and selling pre-loved clothes is a great way to reduce our carbon footprint yet still manage to stay hip and look good. Clothing resale is a 28 million dollars market and will reach 51 billion dollars in the next five years. Online marketplaces such as Etsy and Poshmark provide an easy way for people to sell and buy clothes. Usually, at those online marketplaces, to sell, users simply upload a photo, enter the brand name, and enter an asking price. But it can hard for users to know how much their items are actually worth, and these websites do not provide price suggestions.\nIn this post, I develop an app, Savvy Seller, to predict clothing sale prices based on a photo and brand name of an item. The goal is to help clothing re-sellers better price their items to improve sale performance at online marketplaces. Savvy Seller requires only a photo of the sale item and its brand name from users‚Äô end, but increased price prediction accuracy by 30% comparing with traditional models.\nSteps 1.Use AWS to scrape daily sale histories from online clothing resale marketplaces. Each sale history includes photos of the item, brand name, as well as final sale prices.\n2.Use VGG16 image classifier to find similar looking items. Top layer of VGG16 was chopped off, this will skip the final classification step. All images were converted to vectors through VGG16. When user upload a photo, VGG search for similar-looking item by using cosine similarity between image vectors.\n3.To improve matching accuracy, YOLO object detection framework was used to automatically identity and crop the human and clothes in the images. Feed cropped the images to VGG16 has greatly improved model accuracy.\n4.Classify more than 1600 brands in my database into 5 tiers using k-means clustering based on mean sale price if each brand.\n5.Final Pipeline: when user upload a photo and enter the brand name of the clothes, Savvy seller will first identify the human/clothes in the image and automatically crop out the background, then feed the cropped images to the headless VGG16 model and convert that specific images into vector. After that, Savvy Seller will search for images that were from the same brand tires as entered brand to find most similar looking items in the database. Cosine similarity between images vectors to find the most similar looking items that were sold in the last 2 weeks and return the average sale price.\nFor detailed code, please check out my github repo, or click on the video below. \n","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569888000,"objectID":"1f5bdd7ca6da506ff774aff6bd16b41d","permalink":"/post/savvy_seller/","publishdate":"2019-10-01T00:00:00Z","relpermalink":"/post/savvy_seller/","section":"post","summary":"I am a fashion lover and environmentalist at heart. Buying and selling pre-loved clothes is a great way to reduce our carbon footprint yet still manage to stay hip and look good.","tags":["Computer Vision","Object Detection"],"title":"Predicting Sale Price Using Images","type":"post"},{"authors":null,"categories":null,"content":"","date":1565395200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565395200,"objectID":"b30b634d63ca5081e44983034140799c","permalink":"/project/snake_compare/","publishdate":"2019-08-10T00:00:00Z","relpermalink":"/project/snake_compare/","section":"project","summary":"Find reptiles and amphibians occurrene on the map.","tags":["Urban Biodiversity","Data Visualization","Shiny R"],"title":"Where are the reptiles and amphibians?","type":"project"},{"authors":null,"categories":null,"content":"","date":1564531200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564531200,"objectID":"53789808b26f85ce60757861b2fca3cf","permalink":"/project/salsa/","publishdate":"2019-07-31T00:00:00Z","relpermalink":"/project/salsa/","section":"project","summary":"An example using data to measure environmetal justice.","tags":["Public Health","Data Visualization","Shiny R"],"title":"Measure Social Equality and Public Health","type":"project"},{"authors":null,"categories":null,"content":"","date":1560988800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560988800,"objectID":"d1a7d6f69f5f05d094f0ffafe2ea69e9","permalink":"/project/clustering_app/","publishdate":"2019-06-20T00:00:00Z","relpermalink":"/project/clustering_app/","section":"project","summary":"Using Hierarchical Clustering to prioritize conseravtion areas.","tags":["Clustering","Data Visualization","Shiny R"],"title":"Find Your Neighborhood Type in LA","type":"project"},{"authors":null,"categories":null,"content":"     library(leaflet) library(widgetframe) ## Loading required package: htmlwidgets l \u0026lt;- leaflet() %\u0026gt;% addTiles() %\u0026gt;% setView(0,0,1) frameWidget(l, width=\u0026#39;90%\u0026#39;)  {\"x\":{\"url\":\"/post/Untitled_files/figure-html//widgets/widget_leaflet-01.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4ef943212170721f61d718fb03259022","permalink":"/post/untitled/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/post/untitled/","section":"post","summary":"     library(leaflet) library(widgetframe) ## Loading required package: htmlwidgets l \u0026lt;- leaflet() %\u0026gt;% addTiles() %\u0026gt;% setView(0,0,1) frameWidget(l, width=\u0026#39;90%\u0026#39;)  {\"x\":{\"url\":\"/post/Untitled_files/figure-html//widgets/widget_leaflet-01.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]} ","tags":null,"title":"Untitled","type":"post"}]